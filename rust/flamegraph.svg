<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="1845"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.05%)</title><rect x="0.0000%" y="245" width="0.0542%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.05%)</title><rect x="0.0000%" y="229" width="0.0542%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__getpid (1 samples, 0.05%)</title><rect x="0.0542%" y="229" width="0.0542%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3042%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="0.1084%" y="213" width="0.0542%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.3584%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (213 samples, 11.54%)</title><rect x="0.1626%" y="213" width="11.5447%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="213"/><text x="0.4126%" y="223.50">libsystem_platfor..</text></g><g><title>rust`DYLD-STUB$$memcmp (13 samples, 0.70%)</title><rect x="11.7073%" y="213" width="0.7046%" height="15" fill="rgb(232,128,0)" fg:x="216" fg:w="13"/><text x="11.9573%" y="223.50"></text></g><g><title>rust`core::hash::BuildHasher::hash_one (843 samples, 45.69%)</title><rect x="12.4119%" y="213" width="45.6911%" height="15" fill="rgb(207,160,47)" fg:x="229" fg:w="843"/><text x="12.6619%" y="223.50">rust`core::hash::BuildHasher::hash_one</text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.11%)</title><rect x="70.4065%" y="197" width="0.1084%" height="15" fill="rgb(228,23,34)" fg:x="1299" fg:w="2"/><text x="70.6565%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.05%)</title><rect x="70.5149%" y="197" width="0.0542%" height="15" fill="rgb(218,30,26)" fg:x="1301" fg:w="1"/><text x="70.7649%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="70.5691%" y="181" width="0.0542%" height="15" fill="rgb(220,122,19)" fg:x="1302" fg:w="1"/><text x="70.8191%" y="191.50"></text></g><g><title>rust`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.05%)</title><rect x="70.6233%" y="181" width="0.0542%" height="15" fill="rgb(250,228,42)" fg:x="1303" fg:w="1"/><text x="70.8733%" y="191.50"></text></g><g><title>rust`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.05%)</title><rect x="70.7317%" y="165" width="0.0542%" height="15" fill="rgb(240,193,28)" fg:x="1305" fg:w="1"/><text x="70.9817%" y="175.50"></text></g><g><title>rust`core::str::converts::from_utf8 (1 samples, 0.05%)</title><rect x="70.7317%" y="149" width="0.0542%" height="15" fill="rgb(216,20,37)" fg:x="1305" fg:w="1"/><text x="70.9817%" y="159.50"></text></g><g><title>rust`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.27%)</title><rect x="70.5691%" y="197" width="0.2710%" height="15" fill="rgb(206,188,39)" fg:x="1302" fg:w="5"/><text x="70.8191%" y="207.50"></text></g><g><title>rust`serde::de::SeqAccess::next_element (3 samples, 0.16%)</title><rect x="70.6775%" y="181" width="0.1626%" height="15" fill="rgb(217,207,13)" fg:x="1304" fg:w="3"/><text x="70.9275%" y="191.50"></text></g><g><title>rust`&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="70.7859%" y="165" width="0.0542%" height="15" fill="rgb(231,73,38)" fg:x="1306" fg:w="1"/><text x="71.0359%" y="175.50"></text></g><g><title>rust`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.05%)</title><rect x="70.8401%" y="197" width="0.0542%" height="15" fill="rgb(225,20,46)" fg:x="1307" fg:w="1"/><text x="71.0901%" y="207.50"></text></g><g><title>rust`alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="70.8401%" y="181" width="0.0542%" height="15" fill="rgb(210,31,41)" fg:x="1307" fg:w="1"/><text x="71.0901%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.05%)</title><rect x="70.8401%" y="165" width="0.0542%" height="15" fill="rgb(221,200,47)" fg:x="1307" fg:w="1"/><text x="71.0901%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.05%)</title><rect x="70.8401%" y="149" width="0.0542%" height="15" fill="rgb(226,26,5)" fg:x="1307" fg:w="1"/><text x="71.0901%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.05%)</title><rect x="70.8401%" y="133" width="0.0542%" height="15" fill="rgb(249,33,26)" fg:x="1307" fg:w="1"/><text x="71.0901%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.05%)</title><rect x="70.8401%" y="117" width="0.0542%" height="15" fill="rgb(235,183,28)" fg:x="1307" fg:w="1"/><text x="71.0901%" y="127.50"></text></g><g><title>rust`rayon_core::sleep::Sleep::wake_any_threads (4 samples, 0.22%)</title><rect x="71.3821%" y="149" width="0.2168%" height="15" fill="rgb(221,5,38)" fg:x="1317" fg:w="4"/><text x="71.6321%" y="159.50"></text></g><g><title>rust`rayon_core::sleep::Sleep::wake_specific_thread (4 samples, 0.22%)</title><rect x="71.3821%" y="133" width="0.2168%" height="15" fill="rgb(247,18,42)" fg:x="1317" fg:w="4"/><text x="71.6321%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (4 samples, 0.22%)</title><rect x="71.3821%" y="117" width="0.2168%" height="15" fill="rgb(241,131,45)" fg:x="1317" fg:w="4"/><text x="71.6321%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (12 samples, 0.65%)</title><rect x="71.5989%" y="133" width="0.6504%" height="15" fill="rgb(249,31,29)" fg:x="1321" fg:w="12"/><text x="71.8489%" y="143.50"></text></g><g><title>rust`rayon::slice::quicksort::recurse (26 samples, 1.41%)</title><rect x="70.8943%" y="197" width="1.4092%" height="15" fill="rgb(225,111,53)" fg:x="1308" fg:w="26"/><text x="71.1443%" y="207.50"></text></g><g><title>rust`rayon_core::registry::in_worker (17 samples, 0.92%)</title><rect x="71.3821%" y="181" width="0.9214%" height="15" fill="rgb(238,160,17)" fg:x="1317" fg:w="17"/><text x="71.6321%" y="191.50"></text></g><g><title>rust`rayon_core::registry::Registry::in_worker_cold (17 samples, 0.92%)</title><rect x="71.3821%" y="165" width="0.9214%" height="15" fill="rgb(214,148,48)" fg:x="1317" fg:w="17"/><text x="71.6321%" y="175.50"></text></g><g><title>rust`std::sync::condvar::Condvar::wait (13 samples, 0.70%)</title><rect x="71.5989%" y="149" width="0.7046%" height="15" fill="rgb(232,36,49)" fg:x="1321" fg:w="13"/><text x="71.8489%" y="159.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.05%)</title><rect x="72.2493%" y="133" width="0.0542%" height="15" fill="rgb(209,103,24)" fg:x="1333" fg:w="1"/><text x="72.4993%" y="143.50"></text></g><g><title>rust`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1 samples, 0.05%)</title><rect x="72.3035%" y="197" width="0.0542%" height="15" fill="rgb(229,88,8)" fg:x="1334" fg:w="1"/><text x="72.5535%" y="207.50"></text></g><g><title>rust`serde_json::ser::format_escaped_str (1 samples, 0.05%)</title><rect x="72.3035%" y="181" width="0.0542%" height="15" fill="rgb(213,181,19)" fg:x="1334" fg:w="1"/><text x="72.5535%" y="191.50"></text></g><g><title>rust`rust::main (264 samples, 14.31%)</title><rect x="58.1030%" y="213" width="14.3089%" height="15" fill="rgb(254,191,54)" fg:x="1072" fg:w="264"/><text x="58.3530%" y="223.50">rust`rust::main</text></g><g><title>rust`serde_json::ser::format_escaped_str (1 samples, 0.05%)</title><rect x="72.3577%" y="197" width="0.0542%" height="15" fill="rgb(241,83,37)" fg:x="1335" fg:w="1"/><text x="72.6077%" y="207.50"></text></g><g><title>rust`serde::ser::impls::_&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (1 samples, 0.05%)</title><rect x="72.4119%" y="213" width="0.0542%" height="15" fill="rgb(233,36,39)" fg:x="1336" fg:w="1"/><text x="72.6619%" y="223.50"></text></g><g><title>dyld`start (1,338 samples, 72.52%)</title><rect x="0.0000%" y="261" width="72.5203%" height="15" fill="rgb(226,3,54)" fg:x="0" fg:w="1338"/><text x="0.2500%" y="271.50">dyld`start</text></g><g><title>rust`main (1,337 samples, 72.47%)</title><rect x="0.0542%" y="245" width="72.4661%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="1337"/><text x="0.3042%" y="255.50">rust`main</text></g><g><title>rust`std::sys_common::backtrace::__rust_begin_short_backtrace (1,336 samples, 72.41%)</title><rect x="0.1084%" y="229" width="72.4119%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="1336"/><text x="0.3584%" y="239.50">rust`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust`serde_json::ser::format_escaped_str (1 samples, 0.05%)</title><rect x="72.4661%" y="213" width="0.0542%" height="15" fill="rgb(232,182,51)" fg:x="1337" fg:w="1"/><text x="72.7161%" y="223.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.33%)</title><rect x="72.5203%" y="181" width="0.3252%" height="15" fill="rgb(231,60,39)" fg:x="1338" fg:w="6"/><text x="72.7703%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (1 samples, 0.05%)</title><rect x="72.8455%" y="181" width="0.0542%" height="15" fill="rgb(208,69,12)" fg:x="1344" fg:w="1"/><text x="73.0955%" y="191.50"></text></g><g><title>rust`DYLD-STUB$$sched_yield (1 samples, 0.05%)</title><rect x="72.8997%" y="181" width="0.0542%" height="15" fill="rgb(235,93,37)" fg:x="1345" fg:w="1"/><text x="73.1497%" y="191.50"></text></g><g><title>rust`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (1 samples, 0.05%)</title><rect x="72.9539%" y="181" width="0.0542%" height="15" fill="rgb(213,116,39)" fg:x="1346" fg:w="1"/><text x="73.2039%" y="191.50"></text></g><g><title>rust`crossbeam_epoch::default::with_handle (2 samples, 0.11%)</title><rect x="73.0081%" y="181" width="0.1084%" height="15" fill="rgb(222,207,29)" fg:x="1347" fg:w="2"/><text x="73.2581%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (4 samples, 0.22%)</title><rect x="74.0379%" y="165" width="0.2168%" height="15" fill="rgb(206,96,30)" fg:x="1366" fg:w="4"/><text x="74.2879%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (337 samples, 18.27%)</title><rect x="74.2547%" y="165" width="18.2656%" height="15" fill="rgb(218,138,4)" fg:x="1370" fg:w="337"/><text x="74.5047%" y="175.50">libsystem_kernel.dylib`swtch..</text></g><g><title>libsystem_pthread.dylib`DYLD-STUB$$swtch_pri (1 samples, 0.05%)</title><rect x="92.5203%" y="165" width="0.0542%" height="15" fill="rgb(250,191,14)" fg:x="1707" fg:w="1"/><text x="92.7703%" y="175.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.05%)</title><rect x="92.5745%" y="165" width="0.0542%" height="15" fill="rgb(239,60,40)" fg:x="1708" fg:w="1"/><text x="92.8245%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvbroad (4 samples, 0.22%)</title><rect x="92.6287%" y="149" width="0.2168%" height="15" fill="rgb(206,27,48)" fg:x="1709" fg:w="4"/><text x="92.8787%" y="159.50"></text></g><g><title>rust`rayon::slice::quicksort::recurse (2 samples, 0.11%)</title><rect x="92.8455%" y="149" width="0.1084%" height="15" fill="rgb(225,35,8)" fg:x="1713" fg:w="2"/><text x="93.0955%" y="159.50"></text></g><g><title>rust`rayon::slice::quicksort::partial_insertion_sort (2 samples, 0.11%)</title><rect x="92.8455%" y="133" width="0.1084%" height="15" fill="rgb(250,213,24)" fg:x="1713" fg:w="2"/><text x="93.0955%" y="143.50"></text></g><g><title>rust`rayon::slice::quicksort::choose_pivot (1 samples, 0.05%)</title><rect x="92.9539%" y="133" width="0.0542%" height="15" fill="rgb(247,123,22)" fg:x="1715" fg:w="1"/><text x="93.2039%" y="143.50"></text></g><g><title>rust`rayon::slice::quicksort::partial_insertion_sort (4 samples, 0.22%)</title><rect x="93.4417%" y="117" width="0.2168%" height="15" fill="rgb(231,138,38)" fg:x="1724" fg:w="4"/><text x="93.6917%" y="127.50"></text></g><g><title>rust`rayon::slice::quicksort::recurse (1 samples, 0.05%)</title><rect x="93.6585%" y="117" width="0.0542%" height="15" fill="rgb(231,145,46)" fg:x="1728" fg:w="1"/><text x="93.9085%" y="127.50"></text></g><g><title>rust`rayon::slice::quicksort::partial_insertion_sort (1 samples, 0.05%)</title><rect x="93.6585%" y="101" width="0.0542%" height="15" fill="rgb(251,118,11)" fg:x="1728" fg:w="1"/><text x="93.9085%" y="111.50"></text></g><g><title>rust`rayon::slice::quicksort::recurse (14 samples, 0.76%)</title><rect x="93.0081%" y="133" width="0.7588%" height="15" fill="rgb(217,147,25)" fg:x="1716" fg:w="14"/><text x="93.2581%" y="143.50"></text></g><g><title>rust`rayon_core::registry::in_worker (1 samples, 0.05%)</title><rect x="93.7127%" y="117" width="0.0542%" height="15" fill="rgb(247,81,37)" fg:x="1729" fg:w="1"/><text x="93.9627%" y="127.50"></text></g><g><title>rust`rayon_core::join::join_context::_{{closure}} (1 samples, 0.05%)</title><rect x="93.7127%" y="101" width="0.0542%" height="15" fill="rgb(209,12,38)" fg:x="1729" fg:w="1"/><text x="93.9627%" y="111.50"></text></g><g><title>rust`rayon_core::registry::WorkerThread::wait_until_cold (1 samples, 0.05%)</title><rect x="93.7127%" y="85" width="0.0542%" height="15" fill="rgb(227,1,9)" fg:x="1729" fg:w="1"/><text x="93.9627%" y="95.50"></text></g><g><title>rust`rayon_core::sleep::Sleep::wake_any_threads (1 samples, 0.05%)</title><rect x="93.7127%" y="69" width="0.0542%" height="15" fill="rgb(248,47,43)" fg:x="1729" fg:w="1"/><text x="93.9627%" y="79.50"></text></g><g><title>rust`rayon_core::sleep::Sleep::wake_specific_thread (1 samples, 0.05%)</title><rect x="93.7127%" y="53" width="0.0542%" height="15" fill="rgb(221,10,30)" fg:x="1729" fg:w="1"/><text x="93.9627%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1 samples, 0.05%)</title><rect x="93.7127%" y="37" width="0.0542%" height="15" fill="rgb(210,229,1)" fg:x="1729" fg:w="1"/><text x="93.9627%" y="47.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (5 samples, 0.27%)</title><rect x="93.7669%" y="117" width="0.2710%" height="15" fill="rgb(222,148,37)" fg:x="1730" fg:w="5"/><text x="94.0169%" y="127.50"></text></g><g><title>rust`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (30 samples, 1.63%)</title><rect x="92.6287%" y="165" width="1.6260%" height="15" fill="rgb(234,67,33)" fg:x="1709" fg:w="30"/><text x="92.8787%" y="175.50"></text></g><g><title>rust`rayon_core::join::join_context::_{{closure}} (24 samples, 1.30%)</title><rect x="92.9539%" y="149" width="1.3008%" height="15" fill="rgb(247,98,35)" fg:x="1715" fg:w="24"/><text x="93.2039%" y="159.50"></text></g><g><title>rust`rayon_core::registry::WorkerThread::wait_until_cold (9 samples, 0.49%)</title><rect x="93.7669%" y="133" width="0.4878%" height="15" fill="rgb(247,138,52)" fg:x="1730" fg:w="9"/><text x="94.0169%" y="143.50"></text></g><g><title>rust`rayon_core::sleep::Sleep::wake_any_threads (4 samples, 0.22%)</title><rect x="94.0379%" y="117" width="0.2168%" height="15" fill="rgb(213,79,30)" fg:x="1735" fg:w="4"/><text x="94.2879%" y="127.50"></text></g><g><title>rust`rayon_core::sleep::Sleep::wake_specific_thread (4 samples, 0.22%)</title><rect x="94.0379%" y="101" width="0.2168%" height="15" fill="rgb(246,177,23)" fg:x="1735" fg:w="4"/><text x="94.2879%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (3 samples, 0.16%)</title><rect x="94.0921%" y="85" width="0.1626%" height="15" fill="rgb(230,62,27)" fg:x="1736" fg:w="3"/><text x="94.3421%" y="95.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (6 samples, 0.33%)</title><rect x="94.4715%" y="149" width="0.3252%" height="15" fill="rgb(216,154,8)" fg:x="1743" fg:w="6"/><text x="94.7215%" y="159.50"></text></g><g><title>rust`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (14 samples, 0.76%)</title><rect x="94.2547%" y="165" width="0.7588%" height="15" fill="rgb(244,35,45)" fg:x="1739" fg:w="14"/><text x="94.5047%" y="175.50"></text></g><g><title>rust`crossbeam_epoch::default::with_handle (4 samples, 0.22%)</title><rect x="94.7967%" y="149" width="0.2168%" height="15" fill="rgb(251,115,12)" fg:x="1749" fg:w="4"/><text x="95.0467%" y="159.50"></text></g><g><title>rust`crossbeam_epoch::internal::Global::collect (3 samples, 0.16%)</title><rect x="94.8509%" y="133" width="0.1626%" height="15" fill="rgb(240,54,50)" fg:x="1750" fg:w="3"/><text x="95.1009%" y="143.50"></text></g><g><title>rust`crossbeam_epoch::internal::Global::try_advance (3 samples, 0.16%)</title><rect x="94.8509%" y="117" width="0.1626%" height="15" fill="rgb(233,84,52)" fg:x="1750" fg:w="3"/><text x="95.1009%" y="127.50"></text></g><g><title>rust`crossbeam_epoch::default::with_handle (9 samples, 0.49%)</title><rect x="95.0136%" y="165" width="0.4878%" height="15" fill="rgb(207,117,47)" fg:x="1753" fg:w="9"/><text x="95.2636%" y="175.50"></text></g><g><title>rust`crossbeam_epoch::internal::Global::collect (1 samples, 0.05%)</title><rect x="95.4472%" y="149" width="0.0542%" height="15" fill="rgb(249,43,39)" fg:x="1761" fg:w="1"/><text x="95.6972%" y="159.50"></text></g><g><title>rust`crossbeam_epoch::internal::Global::try_advance (1 samples, 0.05%)</title><rect x="95.4472%" y="133" width="0.0542%" height="15" fill="rgb(209,38,44)" fg:x="1761" fg:w="1"/><text x="95.6972%" y="143.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.05%)</title><rect x="95.5014%" y="149" width="0.0542%" height="15" fill="rgb(236,212,23)" fg:x="1762" fg:w="1"/><text x="95.7514%" y="159.50"></text></g><g><title>rust`rayon_core::registry::WorkerThread::take_local_job (4 samples, 0.22%)</title><rect x="95.5014%" y="165" width="0.2168%" height="15" fill="rgb(242,79,21)" fg:x="1762" fg:w="4"/><text x="95.7514%" y="175.50"></text></g><g><title>rust`crossbeam_deque::deque::Stealer&lt;T&gt;::steal (3 samples, 0.16%)</title><rect x="95.5556%" y="149" width="0.1626%" height="15" fill="rgb(211,96,35)" fg:x="1763" fg:w="3"/><text x="95.8056%" y="159.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (2 samples, 0.11%)</title><rect x="95.6098%" y="133" width="0.1084%" height="15" fill="rgb(253,215,40)" fg:x="1764" fg:w="2"/><text x="95.8598%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.05%)</title><rect x="95.7182%" y="149" width="0.0542%" height="15" fill="rgb(211,81,21)" fg:x="1766" fg:w="1"/><text x="95.9682%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (65 samples, 3.52%)</title><rect x="95.7724%" y="133" width="3.5230%" height="15" fill="rgb(208,190,38)" fg:x="1767" fg:w="65"/><text x="96.0224%" y="143.50">lib..</text></g><g><title>rust`rayon_core::sleep::Sleep::sleep (67 samples, 3.63%)</title><rect x="95.7182%" y="165" width="3.6314%" height="15" fill="rgb(235,213,38)" fg:x="1766" fg:w="67"/><text x="95.9682%" y="175.50">rust..</text></g><g><title>rust`std::sync::condvar::Condvar::wait (66 samples, 3.58%)</title><rect x="95.7724%" y="149" width="3.5772%" height="15" fill="rgb(237,122,38)" fg:x="1767" fg:w="66"/><text x="96.0224%" y="159.50">rust..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (1 samples, 0.05%)</title><rect x="99.2954%" y="133" width="0.0542%" height="15" fill="rgb(244,218,35)" fg:x="1832" fg:w="1"/><text x="99.5454%" y="143.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (1 samples, 0.05%)</title><rect x="99.2954%" y="117" width="0.0542%" height="15" fill="rgb(240,68,47)" fg:x="1832" fg:w="1"/><text x="99.5454%" y="127.50"></text></g><g><title>all (1,845 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="1845"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (507 samples, 27.48%)</title><rect x="72.5203%" y="261" width="27.4797%" height="15" fill="rgb(235,124,12)" fg:x="1338" fg:w="507"/><text x="72.7703%" y="271.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (507 samples, 27.48%)</title><rect x="72.5203%" y="245" width="27.4797%" height="15" fill="rgb(224,169,11)" fg:x="1338" fg:w="507"/><text x="72.7703%" y="255.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>rust`std::sys::unix::thread::Thread::new::thread_start (507 samples, 27.48%)</title><rect x="72.5203%" y="229" width="27.4797%" height="15" fill="rgb(250,166,2)" fg:x="1338" fg:w="507"/><text x="72.7703%" y="239.50">rust`std::sys::unix::thread::Thread::new::th..</text></g><g><title>rust`core::ops::function::FnOnce::call_once{{vtable.shim}} (507 samples, 27.48%)</title><rect x="72.5203%" y="213" width="27.4797%" height="15" fill="rgb(242,216,29)" fg:x="1338" fg:w="507"/><text x="72.7703%" y="223.50">rust`core::ops::function::FnOnce::call_once{..</text></g><g><title>rust`std::sys_common::backtrace::__rust_begin_short_backtrace (507 samples, 27.48%)</title><rect x="72.5203%" y="197" width="27.4797%" height="15" fill="rgb(230,116,27)" fg:x="1338" fg:w="507"/><text x="72.7703%" y="207.50">rust`std::sys_common::backtrace::__rust_begi..</text></g><g><title>rust`rayon_core::registry::WorkerThread::wait_until_cold (496 samples, 26.88%)</title><rect x="73.1165%" y="181" width="26.8835%" height="15" fill="rgb(228,99,48)" fg:x="1349" fg:w="496"/><text x="73.3665%" y="191.50">rust`rayon_core::registry::WorkerThread::wa..</text></g><g><title>rust`rayon_core::sleep::Sleep::wake_any_threads (12 samples, 0.65%)</title><rect x="99.3496%" y="165" width="0.6504%" height="15" fill="rgb(253,11,6)" fg:x="1833" fg:w="12"/><text x="99.5996%" y="175.50"></text></g><g><title>rust`rayon_core::sleep::Sleep::wake_specific_thread (12 samples, 0.65%)</title><rect x="99.3496%" y="149" width="0.6504%" height="15" fill="rgb(247,143,39)" fg:x="1833" fg:w="12"/><text x="99.5996%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (12 samples, 0.65%)</title><rect x="99.3496%" y="133" width="0.6504%" height="15" fill="rgb(236,97,10)" fg:x="1833" fg:w="12"/><text x="99.5996%" y="143.50"></text></g></svg></svg>